name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual builds

permissions:
  contents: write  # Required for creating releases
  actions: read
  checks: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-


    - name: Make gradlew executable
      run: chmod +x android/gradlew

    - name: Generate debug keystore
      run: |
        cd android/app
        # Generate debug keystore if it doesn't exist
        if [ ! -f debug.keystore ]; then
          keytool -genkey -v -keystore debug.keystore \
            -alias androiddebugkey \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android \
            -dname "CN=Android Debug,O=Android,C=US"
          echo "✅ Debug keystore created successfully"
        else
          echo "✅ Debug keystore already exists"
        fi
        ls -la debug.keystore

    - name: Accept Android SDK licenses
      run: yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true

    - name: Build debug APK
      run: |
        cd android
        ./gradlew assembleDebug --no-daemon --stacktrace
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}


    - name: Verify APK signing
      run: |
        echo "Checking APK files exist..."
        DEBUG_APK="android/app/build/outputs/apk/debug/app-debug.apk"
        RELEASE_APK="android/app/build/outputs/apk/release/app-release-unsigned.apk"

        if [ ! -f "$DEBUG_APK" ]; then
          echo "❌ Debug APK not found at $DEBUG_APK!"
          echo "🔍 Looking for APK files in build outputs..."
          find android/app/build/outputs -name "*.apk" -type f || echo "No APK files found"
          exit 1
        fi

        echo "✅ Debug APK found at $DEBUG_APK"
        ls -lh "$DEBUG_APK"

        echo "ℹ️ Release APK build disabled - debug APK only"

        echo "Verifying debug APK signing..."
        if jarsigner -verify "$DEBUG_APK"; then
          echo "✅ Debug APK is properly signed"
        else
          echo "⚠️ Debug APK signature verification failed, but this might be expected for debug builds"
          echo "Checking if APK is at least parseable..."
          file "$DEBUG_APK"
        fi

    - name: Test APK installation (if emulator available)
      run: |
        # This would require setting up an emulator, which is complex in CI
        # For now, we'll just verify the APK can be parsed
        echo "Testing APK parsing..."
        AAPT_PATH=$(find $ANDROID_SDK_ROOT/build-tools -name "aapt" | head -1)
        if [ -n "$AAPT_PATH" ]; then
          $AAPT_PATH dump badging android/app/build/outputs/apk/debug/app-debug.apk | head -5
        else
          echo "⚠️ aapt not found, skipping APK analysis"
        fi

    - name: Upload debug APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: claude-code-monitor-debug-${{ github.sha }}
        path: android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30


    - name: Create release comment (on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "📱 **Android APK Build Successful!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Debug APK**: Ready for installation and testing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📥 **Download Link**:" >> $GITHUB_STEP_SUMMARY
        echo "- Debug APK: Check the 'Artifacts' section of this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔧 **Installation Instructions**:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the debug APK from GitHub Actions artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Enable 'Install from Unknown Sources' on your Android device" >> $GITHUB_STEP_SUMMARY
        echo "3. Install the APK and open Claude Code Monitor" >> $GITHUB_STEP_SUMMARY
        echo "4. Configure server settings and scan QR codes" >> $GITHUB_STEP_SUMMARY

  # Optional: Add a job to create GitHub releases with APKs
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download debug APK
      uses: actions/download-artifact@v4
      with:
        name: claude-code-monitor-debug-${{ github.sha }}
        path: ./artifacts/


    - name: Get commit info
      id: commit
      run: |
        echo "short_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        echo "commit_msg=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT

    - name: Create latest release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "latest-build"
        name: "Latest Build (${{ steps.commit.outputs.short_sha }})"
        body: |
          🚀 **Latest Claude Code Monitor Build**

          **Commit**: ${{ steps.commit.outputs.commit_msg }}
          **SHA**: ${{ github.sha }}
          **Built**: ${{ github.event.head_commit.timestamp }}

          📱 **Installation Instructions**:
          1. Download `app-debug.apk` below
          2. Enable "Install from Unknown Sources" on your Android device
          3. Install the APK
          4. Open Claude Code Monitor and configure your server

          🔧 **Features**:
          - ✅ Auto-discovery server connection
          - ✅ QR code authentication
          - ✅ Real-time session monitoring
          - ✅ Offline message caching
          - ✅ Settings management
        prerelease: true
        files: |
          ./artifacts/*.apk
        fail_on_unmatched_files: false